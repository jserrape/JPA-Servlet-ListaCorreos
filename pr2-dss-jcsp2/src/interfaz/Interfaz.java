package interfaz;

import java.io.ObjectInputStream;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import modelo.Usuario;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;

/**
 *
 * @author Juanca
 */
public class Interfaz extends javax.swing.JFrame {

	static private final String url = "http://localhost:8080/pr2-dss-jcsp2/ListaCorreosServlet";

	private final DefaultTableModel modelo;
	private final String[] Datos;

	/**
	 * Creates new form Interfaz
	 */
	public Interfaz() {
		initComponents();
		this.Datos = new String[3];
		modelo = new DefaultTableModel();
		modelo.addColumn("Nombre");
		modelo.addColumn("Apellidos");
		modelo.addColumn("Correo");
		this.jTable1.setModel(modelo);

		setLocationRelativeTo(null);
		setTitle("Pr2 DSS JCSP");
		actualizarTabla();
	}

	private void limpiar() {
		this.jTextNombre.setText("");
		this.jTextApellidos.setText("");
		this.jTextCorreo.setText("");
	}

	private boolean existeCorreo(String correo) {
		for (int i = 0; i < modelo.getRowCount(); i++) {
			if (modelo.getValueAt(i, 2).toString().equals(correo)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		bInsertar = new javax.swing.JButton();
		bActualizar = new javax.swing.JButton();
		bEliminar = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jTextNombre = new javax.swing.JTextField();
		jTextApellidos = new javax.swing.JTextField();
		jTextCorreo = new javax.swing.JTextField();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { {}, {}, {}, {} }, new String[] {

		}));
		jScrollPane1.setViewportView(jTable1);

		bInsertar.setText("Insertar");
		bInsertar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					bInsertarActionPerformed(evt);
				} catch (ClassNotFoundException | IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		bActualizar.setText("Actualizar");
		bActualizar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					bActualizarActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		bEliminar.setText("Eliminar");
		bEliminar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					bEliminarActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		jLabel1.setText("Nombre:");
		jLabel2.setText("Apellidos:");
		jLabel3.setText("Correo:");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592,
												Short.MAX_VALUE)
										.addContainerGap())
								.addGroup(layout.createSequentialGroup().addComponent(bInsertar)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(bActualizar).addGap(160, 160, 160).addComponent(bEliminar)
										.addGap(22, 22, 22))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup().addComponent(jLabel1)
														.addGap(26, 26, 26).addComponent(jTextNombre))
												.addGroup(layout.createSequentialGroup().addComponent(jLabel3)
														.addGap(30, 30, 30).addComponent(jTextCorreo))
												.addGroup(layout.createSequentialGroup().addComponent(jLabel2)
														.addGap(18, 18, 18).addComponent(jTextApellidos)))
										.addGap(12, 12, 12)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel1).addComponent(jTextNombre, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel2)
								.addComponent(jTextApellidos, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3).addComponent(jTextCorreo, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(bInsertar).addComponent(bActualizar).addComponent(bEliminar))
						.addContainerGap()));

		pack();
	}// </editor-fold>

	private void bInsertarActionPerformed() throws IOException, ClassNotFoundException {
		// TODO add your handling code here:
		String n = this.jTextNombre.getText();
		String a = this.jTextApellidos.getText();
		String c = this.jTextCorreo.getText();

		if ((!"".equals(n.replaceAll(" ", "")) && !"".equals(a.replaceAll(" ", ""))
		&& !"".equals(c.replaceAll(" ", ""))) &&  !this.existeCorreo(c)) {
			Map<String, String> accion = new HashMap<String, String>();
			accion.put("action", "aniadirUsuario");
			accion.put("nombre", n);
			accion.put("apellido", a);
			accion.put("email", c);

			if ((new ObjectInputStream(peticionPost(accion))).readInt() == 0) {
				JOptionPane.showMessageDialog(this, "Se ha insertado el usuario correctamente");
			} else {
				JOptionPane.showMessageDialog(this, "Se ha encontrado un error al insertar el usuario", "Error",
						JOptionPane.WARNING_MESSAGE);
			}
			actualizarTabla();
			limpiar();
		}
	}

	@SuppressWarnings("resource")
	private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
		// TODO add your handling code here:
		String n = this.jTextNombre.getText();
		String a = this.jTextApellidos.getText();
		String c = this.jTextCorreo.getText();
		if (!"".equals(n.replaceAll(" ", "")) && !"".equals(a.replaceAll(" ", ""))
				&& !"".equals(c.replaceAll(" ", ""))) {
			for (int i = 0; i < modelo.getRowCount(); i++) {
				if (modelo.getValueAt(i, 2).toString().equals(c)) {

					Map<String, String> accion = new HashMap<String, String>();
					accion.put("action", "actualizarUsuario");
					accion.put("nombre", n);
					accion.put("apellido", a);
					accion.put("email", c);
					
					if ((new ObjectInputStream(peticionPost(accion))).readInt() == 0) {
						JOptionPane.showMessageDialog(this, "Se ha actualizado el usuario correctamente");
					} else {
						JOptionPane.showMessageDialog(this, "Se ha encontrado un error al actualizar el usuario", "Error",
								JOptionPane.WARNING_MESSAGE);
					}

					actualizarTabla();
					this.limpiar();
					return;
				}
			}
		}
	}

	private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
		// TODO add your handling code here:
		int filaselecionada = jTable1.getSelectedRow();
		if (filaselecionada >= 0) {
			String mail = (String) modelo.getValueAt(filaselecionada, 2);

			Map<String, String> accion = new HashMap<String, String>();
			accion.put("action", "eliminarUsuario");
			accion.put("email", mail);
			
			if ((new ObjectInputStream(peticionPost(accion))).readInt() == 0) {
				JOptionPane.showMessageDialog(this, "Se ha eliminado el usuario correctamente");
			} else {
				JOptionPane.showMessageDialog(this, "Se ha encontrado un error al eliminar el usuario", "Error",
						JOptionPane.WARNING_MESSAGE);
			}
			
			actualizarTabla();
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException|InstantiationException|IllegalAccessException|javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Interfaz().setVisible(true);
			}
		});
	}

	private void actualizarTabla() {
		try {
			Map<String, String> accion = new HashMap<String, String>();
			accion.put("action", "listarUsuarios");
			ObjectInputStream respuesta = new ObjectInputStream(peticionPost(accion));
			List<Usuario> li = extracted(respuesta);
			if (modelo.getRowCount() > 0) {
				for (int i = modelo.getRowCount() - 1; i > -1; i--) {
					modelo.removeRow(i);
				}
			}
			for (int i = 0; i < li.size(); i++) {
				Datos[0] = li.get(i).getNombre();
				Datos[1] = li.get(i).getApellido();
				Datos[2] = li.get(i).getEmail();
				modelo.addRow(Datos);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private List<Usuario> extracted(ObjectInputStream respuesta) throws IOException, ClassNotFoundException {
		return (List<Usuario>) respuesta.readObject();
	}

	public InputStream peticionPost(Map<String, String> parametros) {
		String envio = "", temp;
		for (Map.Entry<String, String> command : parametros.entrySet()) {
			temp = command.getKey() + "=" + command.getValue() + "&";
			envio += temp;
		}
		System.out.println(envio);
		try {
			URL urlObj = new URL(url);
			HttpURLConnection conexion = (HttpURLConnection) urlObj.openConnection();
			conexion.setUseCaches(false);
			conexion.setRequestMethod("POST");
			conexion.setDoOutput(true);
			OutputStream output = conexion.getOutputStream();
			output.write(envio.getBytes());
			output.flush();
			output.close();
			return conexion.getInputStream();
		} catch (MalformedURLException | ProtocolException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		return null;
	}

	// Variables declaration - do not modify
	private javax.swing.JButton bActualizar;
	private javax.swing.JButton bEliminar;
	private javax.swing.JButton bInsertar;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JTextField jTextApellidos;
	private javax.swing.JTextField jTextCorreo;
	private javax.swing.JTextField jTextNombre;
	// End of variables declaration
}
